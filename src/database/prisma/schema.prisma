generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  status      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       user[]
}

model user {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  roleId    Int       @default(3)
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      role?     @relation(fields: [roleId], references: [id])
  scholar   scholar[]
}

model tutor {
  id             Int       @id @default(autoincrement())
  workerId       String    @unique
  name           String
  firstLastName  String
  secondLastName String?
  curp           String
  status         Int       @default(1)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  scholar        scholar[]
}

model educationLevel {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  status      Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scholar     scholar[]
}

model scholarship {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  amount      Float
  status      Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scholar     scholar[]
}

model scholar {
  id               Int             @id @default(autoincrement())
  userId           Int
  tutorId          Int             @unique
  name             String
  firstLastName    String
  secondLastName   String?
  curp             String
  birthdate        DateTime
  educationLevelId Int?
  scholarshipId    Int?
  status           Int             @default(1)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             user            @relation(fields: [userId], references: [id])
  tutor            tutor           @relation(fields: [tutorId], references: [id])
  educationLevel   educationLevel? @relation(fields: [educationLevelId], references: [id])
  scholarship      scholarship?    @relation(fields: [scholarshipId], references: [id])
  document         document[]
}

model document {
  id        Int      @id @default(autoincrement())
  scholarId Int
  type      Int
  saved     DateTime @default(now())
  url       String
  status    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scholar   scholar  @relation(fields: [scholarId], references: [id])
}
